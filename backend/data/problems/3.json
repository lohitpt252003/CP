{
  "problem_id": "3",
  "title": "Maximum Subarray Sum",
  "statement": "Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum and output its sum.\n\nThis is the classic 'Maximum Subarray Sum' problem, typically solved using Kadane’s Algorithm.",
  "input_format": "The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of elements in the array.\nThe second line contains n space-separated integers a[i] (−10^4 ≤ a[i] ≤ 10^4) — the elements of the array.",
  "output_format": "Print a single integer — the maximum sum of any contiguous subarray.",
  "constraints": {
    "1 <= n <= 1000000": true,
    "-10000 <= a[i] <= 10000": true
  },
  "time_limit": "1s",
  "sample_testcases": [
    {
      "input": "9\n-2 1 -3 4 -1 2 1 -5 4",
      "output": "6"
    },
    {
      "input": "5\n1 2 3 4 5",
      "output": "15"
    },
    {
      "input": "5\n-1 -2 -3 -4 -5",
      "output": "-1"
    }
  ],
  "tags": ["DP", "Kadane", "Prefix", "Subarray"]
}
